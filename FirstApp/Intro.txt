web.xml -> Deployment Descriptor file

Web Terminology:

Static Website : server(set of pages (preloaded)) -> client

Dynamic Website : server -> database(s) -> client

Servlet API : package -> javax.servlet
Interfaces: Servlet, ServletRequest, ServletResponse, etc.


Methods of Servlet Interface: 

> init				-> Initialize the servlet.
> service			-> provides reponse for the incoming request.
> destroy			-> invoked only once and to indicate that the servlet is being destroyed.
> getservletconfig	-> returns the object of servletconfig.
> getservletinfo	-> returns information about servlet such as writer, copywrite, version, etc.


Servlet Life Cycle: 

1. Servlet class is loaded.
2. Servlet instance is created.
3. Init method invoked. (servlet initialize)
4. Service method invoked. (servlet run)
5. Destroy method invoked. (servlet objects will be destroyed)

Request Dispatcher: (interface)
> It provides the facility of dispatching the request to another resource it may be html, servlet or jsp.

There are 2 methods to dispatch the servlet: 1. forward()	2. include()

Servlet Topics:

0. Servlet Life Cycle
1. Generic, HTTP Servlet
2. ServletRequest
3. Servlet Collaboration:
	> RequestDispatcher: forward() / include()
	> sendRedirect()
4. ServletConfig(interface): An object made by the web container for each servlet.
> it contains config files that relates to the web.xml.
> if we change some configurations in web.xml then the changes will be done automatically in the servlet using servletconfig object.

5. ServletContext

6. Attribute in Servlet: they are objects that can be set, get and removed from one fo the following scopes:
	1. request Scope
	2. session Scope
	3. application Scope
	
Methods of ServletRequest, HttpSession and ServletContext interface.

1. public void setAttribute(String name, Object object): sets the given object in the application scope.
2. public Object getAttributes(String name): Returns the attribute for the specified name.
3. public Enumeration getInitParameterNames(): returns the names of all context initialized parameters.
4. public void removeAttribute(String name): Removes the attribute with the given name from context.
--------------------------------------------------------------------------------------------------------

Session Tracking in Servlets:

Session means specific interval of time

Session Tracking is a way to maintain state(data) of an user. also known as Session Management.

used to recognize the users

4 types of session tracking techniques:

1. Cookies: small piece of information that is persisted between the multiple client request
> a cookie has a name, a value, optional attrs like max age, path, version, etc.

2. Hidden Form Fields
> here, we will add a hidden textfield to maintain the state of the user

3. URL rewriting: we append a token or identifier to the url of the next servlet or the next resource.
format:
	url?name1=value1&name2=value2&??

4. HttpSession (interface)


Events and Listener: ex: HTTPSESSION



JSP: Java Server Pages / Jakarta Server Pages

In JSP we can code in HTML and add java parts into it.

Advantages of Servlet: 
1. Extension to Servlet
2. Easy to maintain
3. Fast Development: No need to recompile and redeploy
4. Less code than servlet

Life Cycle of JSP: 

1. Translation of JSP Page
2. Compilation of JSP Page
3. Classloading (class will be loaded)
4. Instantiation (Object of the GenericServlet is created)
5. Initialization (the container invokes jspInit() method)
6. Request Processing (the container invokes _jspService() method)
7. Destroy (the container invokes jspDestroy() method)

JSP Scripting Elements: they can be used to write java code inside the jsp page

1. scriptlet tag ( <% java source code %> )
2. expression tag ( <%= statement %> )
3. declaration tag

JSP Implicit Objects: 9 objs : These objs are created by the web container that are available to all the jsp pages.

Object		Type

out			JspWriter
request		HttpServletRequest
response	HttpServletResponse
config		ServletConfig
application	ServletContext
session		HttpSession
pageContext	PageContext
page		Object
exception	Throwable

JSP Directive Elements

jsp directives are messages that tells the web container how to translate a jsp page into a corresponding servlet

3 types: 
	1) page directive
	2) include directive
	3) taglib directive
	
syntax:
	<%@ directive attribute="value" %>
	
	
1) page directive (<%@ page attribute="value" %>)

attributes:

1) import
2) contentType
3) extends
4) info
5) buffer
6) language
7) isELIgnored
8) isThreadSafe
9) autoFlush
10) session
11) pageEncoding
12) errorPage
13) isErrorPage


Action Tags: They are used to control the flow between pages and to use java Bean.

JSP Action Tags		Description
jsp:forward			forwards the request and response to another resource.
jsp:include			includes another resource.
jsp:useBean			creates or locates bean object.
jsp:setProperty		sets the value of property in bean object.
jsp:getProperty		prints the value of property of the bean.
jsp:plugin			embeds another components such as applet.
jsp:param			sets the parameter value. It is used in forward and include mostly.
jsp:fallback		can be used to print the message if plugin is working. It is used in jsp:plugin.


JSTL : The JSP Standard Tag Library (JSTL) represents a set of tags to simplify the JSP development.


Advantages: Fast Development, Code Reusability, No need to use scriptlet tag

4 types: Core, Function, Formatting, XML, SQL

common uri: http://java.sun.com/jsp/jstl/



















